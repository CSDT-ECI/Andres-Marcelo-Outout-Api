buildscript {
    ext {
        spring_version = "6.1.5"
        springboot_version = "3.2.4"
        spring_dependency_management_version = "1.0.11.RELEASE"
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("io.spring.gradle:dependency-management-plugin:${spring_dependency_management_version}")
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springboot_version}")
        classpath("org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:3.3")
    }
}

plugins {
    id "org.sonarqube" version "4.4.1.3373"
}
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'jacoco'


jar {
    //baseName = 'outout'
    version = '0.0.1-SNAPSHOT'
}
sourceCompatibility = 21
targetCompatibility = 21
repositories {
    mavenCentral()
}



dependencies {

    implementation 'joda-time:joda-time:2.3'
    implementation 'org.springframework.boot:spring-boot-starter-validation:3.0.0'
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.4.0'
    //implementation("javax.servlet:javax.servlet-api:4.0.1")
    implementation("org.springframework.boot:spring-boot-starter-web")
    implementation("org.springframework.boot:spring-boot-starter-data-jpa")
    implementation 'org.springframework.security:spring-security-web'
    implementation 'org.springframework.security:spring-security-config'
    implementation 'io.jsonwebtoken:jjwt:0.12.5'
    implementation 'org.joda:joda-money:1.0.3'
    implementation("com.h2database:h2:1.4.192")
    compileOnly 'jakarta.servlet:jakarta.servlet-api'
    testImplementation("org.springframework.boot:spring-boot-starter-test")
    testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.10.2'
    testImplementation("org.hamcrest:hamcrest-all:1.3")
    implementation 'org.springframework.boot:spring-boot-starter-tomcat'
    testImplementation("org.apache.commons:commons-dbcp2:2.9.0")
    testImplementation("org.exparity:hamcrest-date:2.0.0")
    testImplementation 'org.mockito:mockito-core:4.2.0'
    testImplementation 'io.rest-assured:rest-assured:5.4.0'

}

sonarqube {
    properties {
        property "sonar.projectKey", "andres-marcelo-csdt-project_outout-api"
        property "sonar.organization", "andres-marcelo-csdt-project"
        property "sonar.host.url", "https://sonarcloud.io"
        property "sonar.coverage.jacoco.xmlReportPaths", "customJacocoReportDir/test/jacocoTestReport.xml"
    }
}
jacoco {
    toolVersion = "0.8.11"
    reportsDirectory = layout.projectDirectory.dir('customJacocoReportDir')
}
sonarqube {
    properties {
        property "sonar.projectKey", "andresmarcelo-csdt-project_csdt-outout-andresmarcelo-project"
        property "sonar.organization", "andresmarcelo-csdt-project"
        property "sonar.host.url", "https://sonarcloud.io"
    }
}

jacocoTestReport {
    reports {
        xml.required = true
        csv.required = true
        html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
    }
}

eclipse {
    classpath {
        containers.remove('org.eclipse.jdt.launching.JRE_CONTAINER')
        containers 'org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.8'
    }
}

test {
    useJUnitPlatform()
}
